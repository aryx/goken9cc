# -*- org -*-

* TODO
- add 5i/vi (machines or emulators)
- add lex/yacc (generators)
- continue reorg code with SRC/ with symlinks to mimic old org.
- fully working arm32 and arm64 (float, can cross compile principia softwarica)
- bootstrappable (can compile itself)
- hello_linux_mips.exe
- hello_linux_riscv.exe

* 0.1 (Q4 2025) (??? vi mips emulator?, mips v1?, riscv v1?, acid)

** toolchain
- import orginal acid debugger from 9-cc (derived from plan9)
- support for arm64, riscv, and mips in libmach (imported
  respectively from 9front, inferno-os, and 9-cc).

** lib9
- import open.c/_p9dir.c from plan9port which fixed ls/du bugs

** test infra
- multi-arch testing thanks to qemu-user-binfmt (see tests/s/mini/)
- docker build and test working for both amd64 and arm64

** dev infra

** build infra
- support and use "#9/..." paths like in plan9port instead of needing
  special env vars like YACCPAR or RCMAIN (kept for compatibility reasons)
  and pass correct -DGOROOT to goos.c and get9root.c
- started to add GODYNLINK and GOLANG #ifdefs to guard optional
  or golang specific code in the toolchain (defined when building GO/
  but disabled otherwise)

** internals

* Beta (Q3 2025) (arm64 7a/7c/7l v0, riscv ia/ic/il v0, arm64 linux/macos build, arm32 linux run v0, mk/rc, utilities v0, typesetting v0)

** toolchain
- adapt to goken 7a/7c/7l 
  (working hello_linux_arm64.exe and helloc.exe on my thelio astra)
- adapt to goken ia/ic/il (but not tested)
- adapt 5a/5c/5l to generate valid arm32 Linux binaries (EABI)
  (working hello_linux_arm.exe, helloc.exe, and helloprintf.exe also
   on my thelio astra which can run both arm64 and arm32 binaries)
- import original 5a/5c/5l from 9cc/plan9 as 5a_/5c_/5l_ and
  extend also to ELF EABI and working hello_linux_arm_.exe

** build
- add mk and rc source code from principia softwarica so self-contained repo with
  build-mk.sh to "bootstrap" mk/rc
- fix mk/rc for unix (RCMAIN, MKSHELL, import PATH, etc.)
  adapting improvements from kencc and plan9port
- add also ed source code from principia softwarica so no need external 'ed' and
  build-mk.sh now build mk, rc, and 'ed'
- adapt to build on arm64 linux and arm64 macos

** internals
- reorg code with all Go related stuff under GO/ (GOSRC/, GOMISC/, GOTEST/)
- started reorg code with machine/, lib_strings, to match principia-softwarica
- added lib9/math/ subdir and move files there.

** libs
- added libregexp (needed by mk/rc) and libstring (needed by du and rc) from
  principia softwarica or plan9port

** utilities
- add source code of many utilities (cat, cp, grep, ed, diff, etc.) from
  principia softwarica so easier to build and test for principia readers
- add source code of typesetting tools (troff, eqn, tbl, etc.) from
  principia softwarica (actually was not built in principia)


* Alpha (Q2 2025) (focus on C (not Go), Dockerfile/Nix/GHA, mips va/vl/vc v0)
# see also pad.org history section

** toolchain
- add mips toolchain va/vl/vc from https://bitbucket.org/plan9-from-bell-labs/9-cc.git
  and adapt it to goken; tested va/vl with vi from principia on hello_plan9_mips.s
- add arm64 toolchain 7a/7l/7c from https://github.com/inferno-os/inferno-os
  (not tested though)
- add riscv toolchain ia/il/ic from https://github.com/inferno-os/inferno-os
  (not tested though)

** internals
- reorg code with Go related toolchain in GOSRC/ and the C toolchain in src/,
  same for test/ renamed GOTEST/
- start move around Go specific files in GOMISC/ (go editor modes, go shell hooks,
  cgo, go docs, cmd/ebnflint)
- remove the Google (and obsolete) specifics: src/cmd/hgpatch and lib/corereview
- remove support for nacl (google native client old technology superseded by wasm)

** test infra
- add Dockerfile.gosrc and docker.yml GHA (Github Action) CI checks,
  and Dockerfile.alpine (just build, no run; does not run unfortunately)
  and Dockerfile.mksrc (just C toolchain)
- add shell.nix and nix.yml GHA for Linux CI checks (TODO: macOS)
- add basic 'make test' and new tests/s/ and tests/c/

** build
- add mkfiles to better match kencc and plan9 build system
- adapt quietgcc to modern Linux (2025) with recent gcc
- adapt quietgcc to modern macOS (2025) with recent clang
- adapt quietgcc to modern Windows (2025) with recent mingw-gcc

* Goken9cc Pre-history

** TODO Cinap 9front: 2019-2025?
- many fixes to 7[alc]

** Richard Miller: 2018
- cmd/z[alc]/ for RISC-V (later renamed to i[alc] for riscv and j for riscv64)
in https://9p.io/sources/contrib/miller/

** Charles Forsyth?: 2014
- cmd/7[alc] for arm64
in https://bitbucket.org/plan9-from-bell-labs/9-cc/src/master/

** Go pre 1.0: 2008-2010
# see DELETED/doc/devel/release.html for a compact list of changes
# see also 'git log' for a very long list of changes.

*** Go->goken9cc:
fork Go at the October 2010 time to start goken9cc (in May 2025).

*** linker
+ ELF for Linux
+ Mach-O for macOS
+ PE for Windows
+ DWARF for gdb

*** assembler

*** C compilers

*** runtime
+ Linux (x86, amd64)
+ macOS (amd64)
+ Windows (x86) (amd64 support is post Go 1.0)
+ FreeBSD
+ Android (arm)

*** Inferno and plan9port->Go:
- Import [568][acl] and libbio/ from Inferno-os/utils around june 2008
- Import lib9/ from plan9port around june 2008

** Plan9port: 2001?-2007?
- lib9/ to make portable the plan9 compiler
- adapt mk/rc to Unix
 
** Inferno-os: 1995-1997
- make portable the plan9 compiler (with help from plan9port) with lib9/
  that can be built ("hosted") from Linux, macOS, Windows, FreeBSD, ...

** Plan 9: 1985-2002
Most of the code in goken9cc comes from Plan 9 4th edition:
- cmd/[05678qtv][alc]/ cc/ and libmach/
  a multiarch assembler, linker, C compiler toolchain
- libc/, libbio/
  a new minimalist C library (far smaller than glibc or musl)
- cmd/{mk,rc, acid, ...}
  simplified/redesigned versions of Unix tools
- cmd/{ed,grep,diff,cat, ...} utilities
- libregexp/, libstring/
  minimalist C libraries

** Unix (6th edition at least): 1976
the origin:
- lex
- yacc

* Template 0.X (Qx 2025) (major-contrib)

** toolchain

** test infra

** dev infra

** build infra

** internals

** os

** arch
