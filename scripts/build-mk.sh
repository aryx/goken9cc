#!/bin/sh
# Script to compile 'mk' (and 'rc') without using 'mk' (nor 'rc') and generate
# a bin/mk (and bin/rc) so that we don't need a BOOTSTRAP/Linux/386/bin/mk like
# in kencc. Note that kencc has no BOOTSTRAP/Linux/386/bin/rc because
# it assumes the presence of a shell and can work with both 'rc' and 'sh'.

# This file was mostly auto-generated by copy-pasting a trace of mk.

# any error should abort the script
set -e
# for showing the executed commands (verbose)
set -x

if [ ! -f configure ]; then
	echo 'this script must be run from the project root'
	exit 1
fi

TOP=`pwd`
#coupling: mkfiles/mkfile.proto and mkfiles/amd64/mkfile
CFLAGS="-Wno-cpp --std=gnu89 -c -I$TOP/include -I. -O0 -fno-inline -ggdb"
LDFLAGS="-L$TOP/ROOT/amd64/lib"
#coupling: mkconfig
GOOS=linux
GOARCH=amd64

#Note that because we just need to compile mk and rc, we don't need all of lib9
# so we could reduce the list below. However, then we need to delete lib9.a
# when compiling the rest of goken, which we now do (see end of this file).
cd $TOP/src/lib9
gcc $CFLAGS -DPLAN9PORT _p9dir.c -o _p9dir.o
gcc $CFLAGS -DPLAN9PORT _exits.c -o _exits.o
gcc $CFLAGS -DPLAN9PORT argv0.c -o argv0.o
gcc $CFLAGS -DPLAN9PORT atoi.c -o atoi.o
gcc $CFLAGS -DPLAN9PORT cleanname.c -o cleanname.o
gcc $CFLAGS -DPLAN9PORT create.c -o create.o
gcc $CFLAGS -DPLAN9PORT dirfstat.c -o dirfstat.o
gcc $CFLAGS -DPLAN9PORT dirfwstat.c -o dirfwstat.o
gcc $CFLAGS -DPLAN9PORT dirstat.c -o dirstat.o
gcc $CFLAGS -DPLAN9PORT dirwstat.c -o dirwstat.o
gcc $CFLAGS -DPLAN9PORT dup.c -o dup.o
gcc $CFLAGS -DPLAN9PORT errstr.c -o errstr.o
gcc $CFLAGS -DPLAN9PORT exec.c -o exec.o
gcc $CFLAGS -DPLAN9PORT execl.c -o execl.o
gcc $CFLAGS -DPLAN9PORT exitcode.c -o exitcode.o
gcc $CFLAGS -DPLAN9PORT exits.c -o exits.o
gcc $CFLAGS -DPLAN9PORT getenv.c -o getenv.o
gcc $CFLAGS -DPLAN9PORT getfields.c -o getfields.o
gcc $CFLAGS -DPLAN9PORT getwd.c -o getwd.o
gcc $CFLAGS -DPLAN9PORT '-DGOOS="$GOOS"' '-DGOARCH="$GOARCH"' '-DGOROOT="$ROOT"' '-DGOVERSION="goken"' goos.c
gcc $CFLAGS -DPLAN9PORT main.c -o main.o
gcc $CFLAGS -DPLAN9PORT math/nan.c -o math/nan.o
gcc $CFLAGS -DPLAN9PORT nulldir.c -o nulldir.o
gcc $CFLAGS -DPLAN9PORT open.c -o open.o
gcc $CFLAGS -DPLAN9PORT readn.c -o readn.o
gcc $CFLAGS -DPLAN9PORT seek.c -o seek.o
gcc $CFLAGS -DPLAN9PORT strecpy.c -o strecpy.o
gcc $CFLAGS -DPLAN9PORT sysfatal.c -o sysfatal.o
gcc $CFLAGS -DPLAN9PORT time.c -o time.o
gcc $CFLAGS -DPLAN9PORT tokenize.c -o tokenize.o
gcc $CFLAGS -DPLAN9PORT await.c -o await.o
gcc $CFLAGS -DPLAN9PORT getuser.c -o getuser.o
gcc $CFLAGS -DPLAN9PORT jmp.c -o jmp.o
gcc $CFLAGS -DPLAN9PORT notify.c -o notify.o
gcc $CFLAGS -DPLAN9PORT rfork.c -o rfork.o
gcc $CFLAGS -DPLAN9PORT ctime.c -o ctime.o
gcc $CFLAGS -DPLAN9PORT zoneinfo.c -o zoneinfo.o
gcc $CFLAGS -DPLAN9PORT fmt/dofmt.c -o fmt/dofmt.o
gcc $CFLAGS -DPLAN9PORT fmt/fltfmt.c -o fmt/fltfmt.o
gcc $CFLAGS -DPLAN9PORT fmt/fmt.c -o fmt/fmt.o
gcc $CFLAGS -DPLAN9PORT fmt/fmtfd.c -o fmt/fmtfd.o
gcc $CFLAGS -DPLAN9PORT fmt/fmtfdflush.c -o fmt/fmtfdflush.o
gcc $CFLAGS -DPLAN9PORT fmt/fmtlocale.c -o fmt/fmtlocale.o
gcc $CFLAGS -DPLAN9PORT fmtlock2.c -o fmtlock2.o
gcc $CFLAGS -DPLAN9PORT fmt/fmtnull.c -o fmt/fmtnull.o
gcc $CFLAGS -DPLAN9PORT fmt/fmtprint.c -o fmt/fmtprint.o
gcc $CFLAGS -DPLAN9PORT fmt/fmtquote.c -o fmt/fmtquote.o
gcc $CFLAGS -DPLAN9PORT fmt/fmtrune.c -o fmt/fmtrune.o
gcc $CFLAGS -DPLAN9PORT fmt/fmtstr.c -o fmt/fmtstr.o
gcc $CFLAGS -DPLAN9PORT fmt/fmtvprint.c -o fmt/fmtvprint.o
gcc $CFLAGS -DPLAN9PORT fmt/fprint.c -o fmt/fprint.o
gcc $CFLAGS -DPLAN9PORT fmt/nan64.c -o fmt/nan64.o
gcc $CFLAGS -DPLAN9PORT fmt/print.c -o fmt/print.o
gcc $CFLAGS -DPLAN9PORT fmt/seprint.c -o fmt/seprint.o
gcc $CFLAGS -DPLAN9PORT fmt/smprint.c -o fmt/smprint.o
gcc $CFLAGS -DPLAN9PORT fmt/snprint.c -o fmt/snprint.o
gcc $CFLAGS -DPLAN9PORT fmt/sprint.c -o fmt/sprint.o
gcc $CFLAGS -DPLAN9PORT fmt/strtod.c -o fmt/strtod.o
gcc $CFLAGS -DPLAN9PORT fmt/vfprint.c -o fmt/vfprint.o
gcc $CFLAGS -DPLAN9PORT fmt/vseprint.c -o fmt/vseprint.o
gcc $CFLAGS -DPLAN9PORT fmt/vsmprint.c -o fmt/vsmprint.o
gcc $CFLAGS -DPLAN9PORT fmt/vsnprint.c -o fmt/vsnprint.o
gcc $CFLAGS -DPLAN9PORT fmt/charstod.c -o fmt/charstod.o
gcc $CFLAGS -DPLAN9PORT fmt/pow10.c -o fmt/pow10.o
gcc $CFLAGS -DPLAN9PORT utf/rune.c -o utf/rune.o
gcc $CFLAGS -DPLAN9PORT utf/utfecpy.c -o utf/utfecpy.o
gcc $CFLAGS -DPLAN9PORT utf/utflen.c -o utf/utflen.o
gcc $CFLAGS -DPLAN9PORT utf/utfnlen.c -o utf/utfnlen.o
gcc $CFLAGS -DPLAN9PORT utf/utfrrune.c -o utf/utfrrune.o
gcc $CFLAGS -DPLAN9PORT utf/utfrune.c -o utf/utfrune.o
gcc $CFLAGS -DPLAN9PORT utf/utfutf.c -o utf/utfutf.o
gcc $CFLAGS -DPLAN9PORT utf/runetype.c -o utf/runetype.o
ar rsc lib9.a _p9dir.o _exits.o argv0.o atoi.o cleanname.o create.o dirfstat.o dirfwstat.o dirstat.o dirwstat.o dup.o errstr.o exec.o execl.o exitcode.o exits.o getenv.o getfields.o getwd.o goos.o main.o math/nan.o nulldir.o open.o readn.o seek.o strecpy.o sysfatal.o time.o tokenize.o await.o getuser.o jmp.o notify.o rfork.o ctime.o zoneinfo.o fmt/dofmt.o fmt/fltfmt.o fmt/fmt.o fmt/fmtfd.o fmt/fmtfdflush.o fmt/fmtlocale.o fmtlock2.o fmt/fmtnull.o fmt/fmtprint.o fmt/fmtquote.o fmt/fmtrune.o fmt/fmtstr.o fmt/fmtvprint.o fmt/fprint.o fmt/nan64.o fmt/print.o fmt/seprint.o fmt/smprint.o fmt/snprint.o fmt/sprint.o fmt/strtod.o fmt/vfprint.o fmt/vseprint.o fmt/vsmprint.o fmt/vsnprint.o fmt/charstod.o fmt/pow10.o utf/rune.o utf/utfecpy.o utf/utflen.o utf/utfnlen.o utf/utfrrune.o utf/utfrune.o utf/utfutf.o utf/runetype.o
cp lib9.a $TOP/ROOT/amd64/lib/lib9.a


cd $TOP/src/libbio
gcc $CFLAGS -c bbuffered.c
gcc $CFLAGS -c bfildes.c
gcc $CFLAGS -c bflush.c
gcc $CFLAGS -c bgetc.c
gcc $CFLAGS -c bgetrune.c
gcc $CFLAGS -c bgetd.c
gcc $CFLAGS -c binit.c
gcc $CFLAGS -c boffset.c
gcc $CFLAGS -c bprint.c
gcc $CFLAGS -c bputc.c
gcc $CFLAGS -c bputrune.c
gcc $CFLAGS -c brdline.c
gcc $CFLAGS -c brdstr.c
gcc $CFLAGS -c bread.c
gcc $CFLAGS -c bseek.c
gcc $CFLAGS -c bwrite.c
ar rsc libbio.a bbuffered.o bfildes.o bflush.o bgetc.o bgetrune.o bgetd.o binit.o boffset.o bprint.o bputc.o bputrune.o brdline.o brdstr.o bread.o bseek.o bwrite.o
cp libbio.a $TOP/ROOT/amd64/lib/libbio.a

cd $TOP/lib_strings/libregexp
gcc $CFLAGS -c regcomp.c
gcc $CFLAGS -c regerror.c
gcc $CFLAGS -c regexec.c
gcc $CFLAGS -c regsub.c
gcc $CFLAGS -c regaux.c
gcc $CFLAGS -c rregexec.c
gcc $CFLAGS -c rregsub.c
ar rsc libregexp.a regcomp.o regerror.o regexec.o regsub.o regaux.o rregexec.o rregsub.o
cp libregexp.a $TOP/ROOT/amd64/lib/libregexp.a

cd $TOP/src/cmd/mk
gcc $CFLAGS -c globals.c
gcc $CFLAGS -c utils.c
gcc $CFLAGS -c dumpers.c
gcc $CFLAGS -c archive.c
gcc $CFLAGS -c bufblock.c
gcc $CFLAGS -c env.c
gcc $CFLAGS -c file.c
gcc $CFLAGS -c graph.c
gcc $CFLAGS -c lex.c
gcc $CFLAGS -c main.c
gcc $CFLAGS -c match.c
gcc $CFLAGS -c mk.c
gcc $CFLAGS -c parse.c
gcc $CFLAGS -c rc.c
gcc $CFLAGS -c recipe.c
gcc $CFLAGS -c rule.c
gcc $CFLAGS -c run.c
gcc $CFLAGS -c shprint.c
gcc $CFLAGS -c symtab.c
gcc $CFLAGS -c var.c
gcc $CFLAGS -c varsub.c
gcc $CFLAGS -c word.c
gcc $CFLAGS -c Posix.c
gcc $LDFLAGS -o o.out globals.o utils.o dumpers.o archive.o bufblock.o env.o file.o graph.o lex.o main.o match.o mk.o parse.o rc.o recipe.o rule.o run.o shprint.o symtab.o var.o varsub.o word.o Posix.o -lregexp -lbio -l9 -lm
cp o.out $TOP/ROOT/amd64/bin/mk

cd $TOP/src/cmd/rc
yacc -d syn.y
gcc $CFLAGS -DUnix -c code.c
gcc $CFLAGS -DUnix -c exec.c
gcc $CFLAGS -DUnix -c getflags.c
gcc $CFLAGS -DUnix -c glob.c
gcc $CFLAGS -DUnix -c here.c
gcc $CFLAGS -DUnix -c io.c
gcc $CFLAGS -DUnix -c lex.c
gcc $CFLAGS -DUnix -c pcmd.c
gcc $CFLAGS -DUnix -c pfnc.c
gcc $CFLAGS -DUnix -c simple.c
gcc $CFLAGS -DUnix -c trap.c
gcc $CFLAGS -DUnix -c tree.c
gcc $CFLAGS -DUnix -c var.c
gcc $CFLAGS -DUnix -c processes.c
gcc $CFLAGS -DUnix -c globals.c
gcc $CFLAGS -DUnix -c utils.c
gcc $CFLAGS -DUnix -c error.c
gcc $CFLAGS -DUnix -c words.c
gcc $CFLAGS -DUnix -c executils.c
gcc $CFLAGS -DUnix -c status.c
gcc $CFLAGS -DUnix -c builtins.c
gcc $CFLAGS -DUnix -c input.c
gcc $CFLAGS -DUnix -c path.c
gcc $CFLAGS -DUnix -c env.c
gcc $CFLAGS -DUnix -c fmt.c
gcc $CFLAGS -DUnix -c main.c
gcc $CFLAGS -DUnix -c y.tab.c
gcc $CFLAGS -DUnix -c unix.c
gcc $LDFLAGS -o o.out code.o exec.o getflags.o glob.o here.o io.o lex.o pcmd.o pfnc.o simple.o trap.o tree.o var.o processes.o globals.o utils.o error.o words.o executils.o status.o builtins.o input.o path.o env.o fmt.o main.o y.tab.o unix.o -l9 -lm
cp o.out $TOP/ROOT/amd64/bin/rc

# We now also compile 'ed' because it is needed by mkenam and it is simpler
# to reduce external deps.
cd $TOP/utilities/misc/
gcc $CFLAGS -c ed.c
gcc $LDFLAGS -o o.out ed.o -lregexp -lbio -l9 -lm
cp o.out $TOP/ROOT/amd64/bin/ed

# Safer to delete the generated libs as we may have forgotten objects
# that are not needed for mk/rc but might be needed by other programs
# (especially libc.a).
rm -f $TOP/ROOT/amd64/lib/*.a
