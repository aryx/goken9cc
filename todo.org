* Big plan

** Overview

# fix float/64bits ops arm32 and arm64 tests/c/mini2,
# make it work on principia code (arm and x86)! (add wasm later) and bootstrap itself!!!
# produce from hello.{s,c} binaries for SEMI (old) macos (amd64 TODO arm64), (386) windows
# reLPize {Assembler,Linker,Compiler,Libcore}.nw and release (and maybe also {Debugger,Profiler}.nw) "principia-toolchain"!
# => simpler alt to gcc/clang for cross compiling C code! (ex: xv6-{x86,arm,riscv}!)

** Later

*** devdraw from plan9port to goken? can draw ? can port
more stuff to unix? doomplan9?

*** LATER LONG try to boostrap itself; can compile 6a with 6c?

*** LATER SEMI try to unify all the kencc/inferno/plan9 before lpize (5a/5c/5l) again
diff5a diff5c diff5l are quite small across kencc/inferno/plan9 and goken
so no big need to unify. can start from goken probably which has the biggest change

use my diff.rc

*** LATER: start lpize again, redo the work in {Assembler,Linker,Compiler}.nw
relpize, resplit, but at least can reuse most of the thinking/splitting
work done for plan9
AND this time run regression tests first! to catch regression ASAP
update: with 5a_/5c_/5l_ working pretty good, maybe don't have
 to relpize actually and try 5a__/5c__/5l__ from principia's book
 and diff and gradually converge and fix bugs

alt: unless found bugs in plan9 toolchain and go towards merging with goken
codebase instead

*** LATER relax factorize in other linker ld.h like 7l
from l.h -> ld.h factorized
also 7l/{mod,pass,pobj,subr}.c can be moved to ../ld/
and factorize with other linkers
update: better ../lk/

but better wait to avoid diff.rc to show big diffs


* Last

*** port acid/ so can use it to dump the arm64/arm_ binaries!
and see the disassembled code.
right now objdump and llvm-dump and gdb do not work :(
(strace does at least)

*** RELAX move dirs in goken/, use GOROOT/ in Makefile instead of ../

*** RELAX reorg src/ dirs in goken, imitate principia, do the actual move
and use SRC/ symlinks

*** plan9 and goken

**** try tests/c/hello_plan9_arm.exe from .c!
mini libc

**** try tests/c/hello_plan9_mips.exe from .c!
mini libc

tests/c/mini2/ ?

*** FUN try to use 6prof and 6cov

*** ------------------------------------------------

*** goken/utilities/

**** RELAX LP split tr.c, join.c, sed.c, diff*.c
and also make it work on goken

**** make utilities work on goken

***** fix 'du' in goken and 'ls' "not a directory" error in both cases
need copy p9open from plan9port too?
debug?

seems bug in dirreadall

***** make grep compile and work on goken
Runemask ??

***** segfault on tar plan9port.tar
in fmt library, weird s pointer address

***** make tar and gunzip tar tvfz work on goken

***** make zip/unzip work on goken

*** fix bugs in goken progs

**** bug goken 5i, does not seem to work on hello_plan9_arm.exe
compare to running 5i under plan9
bug in libmach? because 5i code in goken is the same than in principia

**** sync 5i with principia Machine.nw

**** bug goken mk/rc, adding lnrand.c to lib9/mkfile didn't trigger recompilation
use mk -dg
to debug and get graph of deps and time comparisons

does original mk better? maybe because if lib.a more recent
than lnrand.c, then it does not know. but lib.a depends on
OFILES so should have new OFILES and so should trigger recompilation
and re-archiving

**** fix mk/rc in goken so can do `{cd ../..; pwd` for get9root.c to work
right now /bin/rc: no such file  error
so then yacc can't work because can't find yaccpar without setting YACCPAR

update: because of pathinit()? should work now?

**** bug mk sync in goken, does not modify the .nw actually
but then modify the .md5sum which then the next mk sync
just erase the modif because the orig .nw was not changed at the
step before

it creates a local Shell.nw! this is bad. need to fix syncweb probably

hard to reproduce, weird.
"orig Utilities.nw has been updated"

**** fix "Not consumed" in Make.nw, weird

*** goken/typesetting/

**** look at x9base/troff, smaller and self contained? can
produce postscript from simpler troff files like plan9.ms?

**** segfault on o.out lex when used from typesetting/grap

**** compile pic, tbl, etc. now that lex and yacc are there

**** LPize troff? eqn, tbl, pic, grap, tr2post, and page to visualize?
Documentation preparation system book
update: actually need postscript interpreter too; page calls gs which is huge

***** try generate end-to-end from hello.man e hello.ps
troff -man hello.man -Tutf | tr2post ?

***** still? first try troff and page on plan9
but can't work I think without aladin postscript. page is calling gs
and lp and tr2post

*** goken/generators

**** RELAX LPize yaccpar too, and yaccpars
and sync in goken and principia

**** try to remove dependency to bison?
good though to also work with bison; it reports more bugs
than plan9 yacc and it's good to be compatible, just like
getting kencc to compile with gcc so easier to bootstrap.

*** ---------------------------------------------------------------

*** add workflow to check it compiles on macos
can't run tests, but at least can check we can compile
most of goken (including utilties)

*** nix.yml with testing also mk/rc build side, and macos/linux
# was waiting for mk/rc to be added in goken itself, and it is now!

*** FUN Debuggers.nw, try understand acid? and libmach? and add in goken?
there is a 9-cc/acid/ !
so it might be portable!
update: chatGPT says it actually can't debug live process :( or can just inspect
its state
maybe still useful though ...

*** port vi to goken
good test also for lib9

* Components

** ARM toolchain : 5a_/5c_/5l_

*** test infra! run hello_plan9_arm.exe on raspeberry pi2 via qemu?
need port principia to raspberry pi2 first then!

*** LATER factorize ld.a lib? imitate what I've done in principia?
hmm but l.h change each time so can do it?

*** LATER: merge with principia and fix regression in principia!
easier when will have test infra via qemu-system-arm

update: easier when goken 5a_/5c_/5l_ can work on linux
and can compile itself on linux => that's a good test suite

** original ARM toolchain : 5a/5c/5l

*** still? can't use 5c on principia libc code, weird!!!
wait.c:33 unknown type 15 in zaddr
can repro minimal case?
set principia/env.sh to point to goken/ROOT/arm64/bin/?

*** goken: get tests/c/mini2/helloprintf_nofloat_no64.exe working for 5a/5c/5l
linux_arm.s syscalls
but got segfault now :( even worse than before

update: better now that I made it work with 5l_ ?

** C compilers: 5c/6c/8c

*** SEMI make it work on principia code!

** assemblers: 5a/6a/8a

** linkers: 6l/6l/8l

** mk/rc

*** rc

**** RELAX use #9/data/rc/rcmain ? or #9/etc/rcmain.unix ?
and also overwrite via RCMAIN var

**** regsub_ in Plan9.c and Posix.c
alt: adapt libregexp in principia to match the one in goken/kencc
right now in mk I need to adjust 

-                            regsub(pre->s, buf, /*sizeof(buf),*/ rmatch, NREGEXP);
+                            regsub(pre->s, buf, sizeof(buf), rmatch, NREGEXP);

**** LATER: port enough of :I: so can use goken mk for mk sync too!!!
so don't need to switch back and forth between kencc/goken mk
and xix mk


** libs

** Arch

*** still? integrate also 5coff ? and coff code?

*** riscv 

riscv and plan9!
https://riscv.org/news/2020/10/a-plan-9-c-compiler-for-rv32gc-and-rv64gc/
also xv6-riscv?

** Debugger

*** LATER make acid debugger work on it?
port acid to Linux/macOS/windows? can it run there?

** GO stuff

*** FUN try run with qemu on bare hardware, try runtime/tiny target with qemu on x86
see also DELETED/misc/arm/ and the use of adb and maybe android emulator

**** try also the tiny/arm ? but no write :)

*** still? rerun the mkdefs, mksyscall, ... to generate the updated zxxx?
alt: take them from latest go repo and hope it's backward compatible?

* Infra

** Test infra

*** LATER: try to compile plan9 with goken9cc!!!

*** LATER: try to compile goken with goken9cc!!!

*** LATER add basic regression tests to goken9cc
and keep all the go stuff which is a great testcase for 6c itself :)

*** More workflows! build_amd64_linux.yaml, build_amd64_windows
and test_xxx too ? alla semgrep workflows
start use jsonnet?

start multi GOOS and GOARCH in CI? in Docker can try all combinations?

** Build infra

*** RELAX goken/mkfiles/386/mkfile
and try to compile goken with -m32

*** make goken compile on Windows 386

**** make part of goken compile on windows
until 6g at least; even though sad that get runtime error when running 6g

***** fix weird compilation error in windows lib9/ that if you type make again
then it works the second time

**** hello_windows_x86.s
no simple sys.s like for darwin and linux :(
no interrupt and simple syscalls. Have to use this
stdcall complex thing and kernel32.dll and maybe complex setup

**** hello_windows_x86.c
try make hello.c that link with a few sys.s for windows and link for windows
maybe remove *.go in runtime/ and see if can build a runtime.a that
I can then use then to link a simple hello.c calling print.c

try rt0.8 and then 8l but then linking errors so missing stuff

**** try to fix 6g on Windows? still betypeinit error?

**** window.yml: try install mingw from windows-latest GHA job as experiment
so later can try to compile goken9cc in CI!

imitate some of the stuff in semgrep/.../build-windows-x86

*** less: make goken compile and run on macOS arm64

**** make goken compile on macOS arm64
GOOS=darwin GOARCH=amd64

**** try nix.yml macos-latest? need set GOARCH maybe?

**** macos.yml: try running generated binaries on macos-12 and use Rosetta 2 to
emulate x86_64 ?
need sign it first?

*** still? switch from bison to yacc? so can work on plan9!
anyway I get bad errors about yerr.h that we could fix by switching to regular yacc!
update: seems to work already; I use yacc in my mkfile

*** LATER: try to compile goken9cc on plan9!!!!!
need VM then ... and need to find a way to transfer data from one to the other

*** still? support native windows (in Nt/) like in the original kencc?
needed?

** Bench infra

*** LATER add C tests and C bench for goken9cc
take the one from Leroy for compcert?

** Dev infra

*** less: .gitignore inspired from DELETED/.hgignore

*** LATER betterfix the hack I put (e.g., -Wl,--allow-multiple-definition)

**** fix some EXTERN to avoid -Wl,--allow-multiple-definition

**** fix gc/yerrxxx.h hack and yerr.h loadsys issue
and restore the syntax/ from the testsuite and other few tests

**** LATER: fix the many warnings reported by gcc and clang instead of using quietgcc
and abusing -Wno

** Internals

*** update from plan9?

*** update from inferno-os?
looks like it contains the latest portable sources
kencc and 9-cc seems not uptodate

but at the same time, I don't think it has 5a/5c/... synced
with the latest plan9 versions 
(which I did sync to get a working raspberry pi build of plan9)

* Docs

** Misc

*** LATER read doc/asm.html in latest go and reference it from Assembler.nw
