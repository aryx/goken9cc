#!/bin/sh
#alt: #! /usr/bin/env bash
set -eu # to debug this script add '-x'

###############################################################################
# Prelude
###############################################################################
# The goal of this script is to automate the configuration and installation
# of packages that are needed to then compile and install goken itself.
#
# The goal is also to use a single command that can work on all platforms:
#  - Linux (Alpine for Docker, Ubuntu for Github Actions, Nix/Arch/...)
#  - macOS (HomeBrew, Nix)
#  - Windows (Cygwin, Mingw, WSL)
# and that setup everything (e.g., gcc/clang, mk/rc).
#
# This is reminescent of the classic "configure; make; make install"
# trifecta of building and installing GNU packages, but adapted to the
# new world of software development with powerful package managers and
# software written using multiple programming languages.
#
# This script currently assumes that gcc (and binutils) as well as
# a few other utilities (e.g., make, bash) have already been installed.
#
# TODO: 
#  - check for gcc/clang
#  - detect if bin/ contains mk, rc, and ed
#    and maybe run scripts/build-mk.sh and promote-mk.sh automatically

###############################################################################
# Entry point
###############################################################################

#TODO: imitate what x9cc/configure does
ARCH=`uname -m`
case "$ARCH" in
    x86_64)
        GOARCH=amd64
        ;;
    aarch64 | arm64)
        GOARCH=arm64
        ;;
    *)
        echo "Unsupported architecture: $ARCH" >&2
        exit 1
        ;;
esac

OS=`uname -s`
case "$OS" in
    Linux)
        GOOS=linux
        YACC=yacc
        ;;
    Darwin)
        GOOS=darwin
        YACC=byacc
        ;;
    *)
        echo "Unsupported OS: $OS" >&2
        exit 1
        ;;
esac

echo 'Generating ./mkconfig'
#alt: could be set by env.sh
#old: now in mkfiles/$objtype/mkfile
#  O=o
#old: now in mkfiles/mkfile.proto included from mkfiles/$objtype/mkfile
#  CPUS=arm amd64 386
#  OS=568
echo "objtype=$GOARCH" > mkconfig
echo "GOOS=$GOOS" >> mkconfig
echo "GOARCH=$GOARCH" >> mkconfig
#still needed? used in golang
#GOHOSTOS=linux
#GOHOSTARCH=amd64
echo "YACC=$YACC" >> mkconfig

#TODO: run scripts/build-mk.sh and scripts/promote-mk.sh

echo 'Everything looks fine. You can now run: '
echo
echo '   $ make'
echo '   $ make install'
echo
echo 'Here is the content of the ./mkconfig that configure generated:'
cat mkconfig
